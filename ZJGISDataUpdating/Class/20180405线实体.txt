        /* 描述: 该函数用于在进行任意对象集成时识别出更新变化的要素
         * （任意对象集成只将新增空间对象和修改空间对象集成到数据库中，主要针对道路，水系，居民地（建构筑物）要素类，它们都有name字段作为空间对象标记）。
         * 通过将两个图层进行叠加分析来查找,首先遍历TU（pSrcFcls）图层中的每个要素通过空间自定义的关系在TE（pTarFcls）图层中查找相应的要素,
           如果找不到对应要素,则标记为4表示该要素为新增的空间对象， 
           如果找到一个要素看它们的图形和属性是否发生变化,如果图形属性都发生变化，则在TR图层中创建一个新要素，该要素获得TE图层中要素的FIXOID号，
         *                  获取TU图层中的图形属性，TAGID标记为2；
         *     只图形变化，则在TR图层中创建一个新要素，该要素获得TE图层中要素的FIXOID号及属性，获取TU图层中的图形，TAGID标记为5；
         *     只属性变化，则在TR图层中创建一个新要素，该要素获得TE图层中要素的FIXOID号及图形，获取TU图层中的属性，TAGID标记为6。 
        方法与步骤：
         * 遍历TU中的每个要素通过自定义关系查找，
         *      如果没找到则为新增；
         *      如果找到了几个要素，根据匹配属性项和几何测度求出同名实体，如果没有匹配实体则则标记为新增，找到几个要素标记为冲突要素，如果找到一个同名实体，
         *      则候选集中的其他要素标记为冲突要素；如果这些被标记为冲突的要素后来被替换更新，则取消冲突标记，冲突要素临时存放到内存中，
         *      最后这些标记的新要素都存放到TR层.
         *      图形变化为1,属性变化为2，图形属性均变化为3 新增要素为4，未变化为0， 要素冲突为5；
         */
        /// <summary>
        /// 几何匹配
        /// </summary>
        /// <param name="pSrcFcls">源图层</param>
        /// <param name="pTarFcls">待匹配图层</param>
        /// <param name="resultTable">保存结果的表TRA_PT_I_PtTable</param>
        /// <param name="matchedMode">匹配模式：设置匹配选择方式，0 代表几何匹配，1代表拓扑匹配，2代表属性匹配 </param>
        /// <param name="weight">表MatchedPointFCSetting中的（综合相似度阈值）</param>
        /// <param name="buffer">表MatchedPointFCSetting中的（搜索半径）字段值</param>
        /// <param name="fields">表MatchedPointFCSetting中的（匹配属性）字段值</param>
        /// <param name="prgMain">总进度条</param>
        /// <param name="prgSub">子进度条</param>
        /// <param name="stateLabel">状态信息</param>
        /// <returns></returns>
        public bool SearchChangedFeatures(IFeatureClass pSrcFcls, IFeatureClass pTarFcls, ITable resultTable, double[] weight, 
            double buffer, string fields, ProgressBar prgMain, ProgressBar prgSub, LabelX stateLabel, CheckBox chkBoxIndicator)
        {
            IFeature pSrcFeature = null;
            IFeature pTarFeature = null;
            IFeatureCursor pTarCursor = null;//工作区数据指针

            IRelationalOperator pRelOp;
            bool blnShpEqual = false;  //形状匹配
            bool blnAttriEqual = false;//属性匹配
            int i = 0;
            int indexChangeMaker = -1;

            int lFeatcount = 0;  //临时层要素个数

            int idx = 0;
            //找到的与源要素有关的目标要素
            Dictionary<int, IFeature> pDicCol = null;
            ISpatialFilter pSFilter = null; 

            //处理的临时要素
            int tempFeatCount = 0; 

            ////进入编辑状态
            //匹配表
            IWorkspace workspace = (resultTable as IDataset).Workspace;
            IWorkspaceEdit workspaceEdit = workspace as IWorkspaceEdit;
            workspaceEdit.StartEditing(true);
            workspaceEdit.StartEditOperation();
            //源图层要素个数
            int sourceFeatCount = pSrcFcls.FeatureCount(null);
            //源图层要素指针
            IFeatureCursor pSrcCursor = pSrcFcls.Search(null, false);

            //设置进度条
            if (sourceFeatCount > 0)
            {
                prgMain.Maximum = sourceFeatCount;
            }
            prgSub.Maximum = 100;
            prgSub.Value = 0;
            prgMain.Value = 0;

            if ((pSrcCursor != null))
            {
                pSrcFeature = pSrcCursor.NextFeature();
            }
            //指示属性值是否相等
            blnAttriEqual = true;

            IRowBuffer resultTableRowBuffer = null;
            ICursor resultTableRowCursor = null;
            //源要素总的循环
            try
            {
                while (pSrcFeature != null)
                {
                    pDicCol = new Dictionary<int, IFeature>();
                    pSFilter = new SpatialFilter(); 
                    resultTableRowBuffer = resultTable.CreateRowBuffer();
                    resultTableRowCursor = resultTable.Insert(true);
                    indexChangeMaker = resultTableRowBuffer.Fields.FindField("变化标记");
                    /**通过用代码构建缓冲区分析，来判断是否是同一个要素*/
                    if (pSrcFeature.Shape.GeometryType == esriGeometryType.esriGeometryPolyline)
                    {
                        ITopologicalOperator top = pSrcFeature.Shape as ITopologicalOperator;
                        pSFilter.Geometry = top.Buffer(buffer) as IGeometry;
                        //自定义空间查询,减少查询次数,提高查询速度
                        pSFilter.SpatialRel = esriSpatialRelEnum.esriSpatialRelIntersects;
                    }
                    else if (pSrcFeature.Shape.GeometryType == esriGeometryType.esriGeometryPolygon)
                    {
                        pSFilter.Geometry = pSrcFeature.Shape;//查询边界形状为多边形
                        pSFilter.SpatialRel = esriSpatialRelEnum.esriSpatialRelRelation;//函数用法
                        pSFilter.SpatialRelDescription = "T********";
                    }
                    else if (pSrcFeature.Shape.GeometryType == esriGeometryType.esriGeometryPoint)
                    {
                        //创建缓冲区
                        ITopologicalOperator top = pSrcFeature.Shape as ITopologicalOperator;
                        pSFilter.Geometry = top.Buffer(buffer) as IGeometry;
                        //自定义空间查询,建立缓冲区
                        //设置缓冲区过滤条件：包含
                        pSFilter.SpatialRel = esriSpatialRelEnum.esriSpatialRelContains;
                    }

                    //得到对应pSrcFeature的TE图层上的要素游标
                    //查询在原图层多边形边界处的工作层的元素
                    pTarCursor = pTarFcls.Search(pSFilter, false);
                    //得到对应pSrcFeature的TE图层上的要素个数
                    lFeatcount = pTarFcls.FeatureCount(pSFilter);
                    pTarFeature = pTarCursor.NextFeature();
                    idx = 0;

                    //设置表TRA_PT_I_PtTabl的（源OID）字段的值――cell[1]
                    resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField("源OID"), pSrcFeature.OID);

                    while ((pTarFeature != null))
                    {
                        if ((pTarFeature.Shape != null))
                        {
                            if (pTarFeature.Shape.GeometryType == esriGeometryType.esriGeometryPolyline)
                            {
                                if (fields.Length > 0)
                                {
                                    string[] array = fields.Split(';');
                                    string test1 = array[0];

                                    for (int k = 0; k < array.Length; k++)
                                    {
                                        if (array[k].Length > 0)
                                        {
                                            //两个图层的名称字段名称不同
                                            if (array[k].Contains(':'))
                                            {
                                                string[] arr = ClsStatic.SplitStrColon(array[k]);
                                                string pSrcfield = pSrcFeature.get_Value(pSrcFeature.Fields.FindField(arr[0])).ToString();
                                                string pTarfield = pTarFeature.get_Value(pTarFeature.Fields.FindField(arr[1])).ToString();

                                                //if (StringSameOrNot(pSrcStr, pTarStr) > 0)
                                                if (pSrcfield.Length > 0 && pTarfield.Length > 0)
                                                {
                                                    //test
                                                    //int test0 = StringSameOrNot(pSrcStrName, pTarStrName);
                                                    //int test0 = StringSameOrNot2(pSrcfield, pTarfield);

                                                    string tempSrc = "";
                                                    string tempTar = "";
                                                    for (int j = 0; j < resultTable.Fields.FieldCount; j++)
                                                    {
                                                        if (resultTable.Fields.get_Field(j).AliasName == "源要素" + arr[0])
                                                        {
                                                            tempSrc = resultTable.Fields.get_Field(j).AliasName;
                                                        }
                                                        if (resultTable.Fields.get_Field(j).AliasName == "待匹配要素" + arr[1])
                                                        {
                                                            tempTar = resultTable.Fields.get_Field(j).AliasName;
                                                        }
                                                    }

                                                    //设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                                    resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField(tempSrc), pSrcfield);

                                                    double Similarity = ClsCosine.getSimilarity(pSrcfield, pTarfield);

                                                    //if (StringSameOrNot2(pSrcfield, pTarfield) > 2)
                                                    if (Similarity > 0.7)
                                                    {
                                                        //设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                                        resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField(tempTar), pTarfield);

                                                        CalculateIndcators(weight, buffer, chkBoxIndicator, pSrcFeature, pTarFeature, resultTableRowBuffer);

                                                        int index = 0;

                                                        //if (polylineRadio > weight[2])
                                                        //{
                                                        //如果两个点之间的距离小于设置的综合相似度
                                                        //if (distance < weight[0] && MatchCode(pSrcFeature, pTarFeature))
                                                        //if (MatchCode(pSrcFeature, pTarFeature))
                                                        //{
                                                        //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值为空――cell[2]
                                                        if (resultTableRowBuffer.get_Value(resultTableRowBuffer.Fields.FindField("待匹配OID")).ToString() == "")
                                                        {
                                                            //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                                            resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField("待匹配OID"), pTarFeature.get_Value(index));
                                                        }
                                                        else
                                                        {
                                                            string oids = resultTableRowBuffer.get_Value(resultTableRowBuffer.Fields.FindField("待匹配OID")).ToString() + ";" + pTarFeature.get_Value(index);
                                                            //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                                            resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField("待匹配OID"), oids);
                                                        }

                                                        if (!pDicCol.ContainsKey(idx))
                                                        {
                                                            pDicCol.Add(idx, pTarFeature);
                                                        }
                                                        idx+=1;
                                                        //}
                                                    }
                                                    //}

                                                }
                                            }
                                            //两个图层的名称字段名称相同
                                            else
                                            {
                                                //string pSrcStrName = pSrcFeature.get_Value(pSrcFeature.Fields.FindFieldByAliasName("名称")).ToString();
                                                //string pSrcStrName = pSrcFeature.get_Value(pSrcFeature.Fields.FindField(ClsConfig.LayerConfigs[(pSrcFcls  as IDataset).Name].NameField)).ToString();
                                                //string pSrcStrName = pSrcFeature.get_Value(pSrcFeature.Fields.FindFieldByAliasName(array[0])).ToString();
                                                string pSrcfield = pSrcFeature.get_Value(pSrcFeature.Fields.FindField(array[k])).ToString();
                                                //string pTarStrName = pTarFeature.get_Value(pTarFeature.Fields.FindFieldByAliasName("名称")).ToString();
                                                //string pTarStrName = pTarFeature.get_Value(pTarFeature.Fields.FindField(ClsConfig.LayerConfigs[(pTarFcls as IDataset).Name].NameField)).ToString();
                                                //string pTarStrName = pTarFeature.get_Value(pTarFeature.Fields.FindFieldByAliasName(array[0])).ToString();
                                                string pTarfield = pTarFeature.get_Value(pTarFeature.Fields.FindField(array[k])).ToString();



                                                //if (StringSameOrNot(pSrcStr, pTarStr) > 0)
                                                if (pSrcfield.Length > 0 && pTarfield.Length > 0)
                                                {
                                                    //test
                                                    //int test0 = StringSameOrNot(pSrcStrName, pTarStrName);
                                                    //int test0 = StringSameOrNot2(pSrcfield, pTarfield);

                                                    string tempSrc = "";
                                                    string tempTar = "";
                                                    for (int j = 0; j < resultTable.Fields.FieldCount; j++)
                                                    {
                                                        if (resultTable.Fields.get_Field(j).AliasName == "源要素" + array[k])
                                                        {
                                                            tempSrc = resultTable.Fields.get_Field(j).AliasName;
                                                        }
                                                        if (resultTable.Fields.get_Field(j).AliasName == "待匹配要素" + array[k])
                                                        {
                                                            tempTar = resultTable.Fields.get_Field(j).AliasName;
                                                        }
                                                    }

                                                    //设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                                    //rowBuffer.set_Value(rowBuffer.Fields.FindField("源图层名称"), pSrcfield);
                                                    resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField(tempSrc), pSrcfield);
                                                    double Similarity = ClsCosine.getSimilarity(pSrcfield, pTarfield);

                                                    //if (StringSameOrNot2(pSrcfield, pTarfield) > 2)
                                                    //if (StringSameOrNot2(pSrcfield, pTarfield) > 2)
                                                    if (Similarity > 0.7)
                                                    {
                                                        //设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                                        //rowBuffer.set_Value(rowBuffer.Fields.FindField("待匹配图层名称"), pTarfield);
                                                        resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField(tempTar), pTarfield);
                                                        //20170516注释掉
                                                        //if (MatchCode(pSrcFeature, pTarFeature))
                                                        //{
                                                        //    //设置表TRA_PT_I_PtTabl的（源编码）字段的值――cell[4]
                                                        //    rowBuffer.set_Value(4, pSrcFeature.get_Value(pSrcFeature.Fields.FindField("GCode")));
                                                        //    //设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                                        //    rowBuffer.set_Value(5, pTarFeature.get_Value(pTarFeature.Fields.FindField("GCode")));
                                                        //}

                                                        CalculateIndcators(weight, buffer, chkBoxIndicator, pSrcFeature, pTarFeature, resultTableRowBuffer);

                                                        int index = 0;
                                                        //if (polylineRadio > weight[2])
                                                        //{
                                                        //如果两个点之间的距离小于设置的综合相似度
                                                        //if (distance < weight[0] && MatchCode(pSrcFeature, pTarFeature))
                                                        //if (MatchCode(pSrcFeature, pTarFeature))
                                                        //{
                                                        //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值为空――cell[2]
                                                        if (resultTableRowBuffer.get_Value(resultTableRowBuffer.Fields.FindField("待匹配OID")).ToString() == "")
                                                        {
                                                            //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                                            resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField("待匹配OID"), pTarFeature.get_Value(index));
                                                        }
                                                        else
                                                        {
                                                            string oids = resultTableRowBuffer.get_Value(resultTableRowBuffer.Fields.FindField("待匹配OID")).ToString() + ";" + pTarFeature.get_Value(index);
                                                            //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                                            resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField("待匹配OID"), oids);
                                                        }

                                                        //20170912
                                                        ////设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                                        //rowBuffer.set_Value(rowBuffer.Fields.FindField("源图层名称"), pSrcFeature.get_Value(pSrcFeature.Fields.FindFieldByAliasName(array[0])));
                                                        ////设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                                        //rowBuffer.set_Value(rowBuffer.Fields.FindField("待匹配图层名称"), pTarFeature.get_Value(pTarFeature.Fields.FindFieldByAliasName(array[0])));

                                                        if (!pDicCol.ContainsKey(idx))
                                                        {
                                                            pDicCol.Add(idx, pTarFeature);
                                                        }
                                                        idx = idx + 1;
                                                        //}
                                                    }
                                                    //}

                                                }
                                            }
                                        }
                                        #region 1126注释
                                        ////tips:只有几何匹配
                                        ////没有选择属性匹配，那么只是几何匹配，需要用到反向匹配
                                        //else
                                        //{
                                        //    #region 形状相似度等
                                        //    //ClsIndicatorFun clsMatching = new ClsIndicatorFun();
                                        //    //clsMatching.SourceFeature = pSrcFeature;
                                        //    //clsMatching.TargetFeature = pTarFeature;

                                        //    //double matchedPoints = 0;
                                        //    //double shape = 0;
                                        //    //double polylineRadio = 0;

                                        //    //int index = 0;
                                        //    ////test
                                        //    //string test3 = pTarFeature.get_Value(index).ToString();


                                        //    ////20170518注释掉
                                        //    ////形状相似度
                                        //    //shape = clsMatching.PolylineShapeSimilarValue();
                                        //    ////节点相似度
                                        //    //matchedPoints = clsMatching.MatchedPointsSimilarValue(buffer);
                                        //    ////综合相似度
                                        //    //polylineRadio = shape * weight[0] + matchedPoints * weight[1];

                                        //    //string shape1 = string.Format("{0:0.00000000}", shape);
                                        //    //string matchedPoints1 = string.Format("{0:0.00000000}", matchedPoints);
                                        //    //string polygonRatio1 = string.Format("{0:0.00000000}", polylineRadio);

                                        //    //rowBuffer.set_Value(rowBuffer.Fields.FindField("形状相似度"), shape1);
                                        //    //rowBuffer.set_Value(rowBuffer.Fields.FindField("节点相似度"), matchedPoints1);
                                        //    //rowBuffer.set_Value(rowBuffer.Fields.FindField("综合相似度"), polygonRatio1);
                                        //    #endregion

                                        //    //if (polylineRadio > weight[2])
                                        //    //{
                                        //    //如果两个点之间的距离小于设置的综合相似度
                                        //    //if (distance < weight[0] && MatchCode(pSrcFeature, pTarFeature))
                                        //    //if (MatchCode(pSrcFeature, pTarFeature))
                                        //    //{
                                        //    int index = 0;

                                        //    //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值为空――cell[2]
                                        //    if (rowBuffer.get_Value(rowBuffer.Fields.FindField("待匹配OID")).ToString() == "")
                                        //    {
                                        //        //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                        //        rowBuffer.set_Value(rowBuffer.Fields.FindField("待匹配OID"), pTarFeature.get_Value(index));
                                        //    }
                                        //    else
                                        //    {
                                        //        string oids = rowBuffer.get_Value(rowBuffer.Fields.FindField("待匹配OID")).ToString() + ";" + pTarFeature.get_Value(index);
                                        //        //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                        //        rowBuffer.set_Value(rowBuffer.Fields.FindField("待匹配OID"), oids);
                                        //    }

                                        //    //20170912
                                        //    ////设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                        //    //rowBuffer.set_Value(rowBuffer.Fields.FindField("源图层名称"), pSrcFeature.get_Value(pSrcFeature.Fields.FindFieldByAliasName(array[0])));
                                        //    ////设置表TRA_PT_I_PtTabl的（待匹配编码）字段的值――cell[5]
                                        //    //rowBuffer.set_Value(rowBuffer.Fields.FindField("待匹配图层名称"), pTarFeature.get_Value(pTarFeature.Fields.FindFieldByAliasName(array[0])));

                                        //    if (!pDicCol.ContainsKey(lIdx))
                                        //    {
                                        //        pDicCol.Add(lIdx, pTarFeature);
                                        //    }
                                        //    lIdx = lIdx + 1;
                                        //    //}

                                        //}
                                        #endregion
                                    }
                                }
                                else
                                {
                                    CalculateIndcators(weight, buffer, chkBoxIndicator, pSrcFeature, pTarFeature, resultTableRowBuffer);

                                    //if (polylineRadio > weight[2])
                                    //{
                                    //如果两个点之间的距离小于设置的综合相似度
                                    //if (distance < weight[0] && MatchCode(pSrcFeature, pTarFeature))
                                    //if (MatchCode(pSrcFeature, pTarFeature))
                                    //{
                                    //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值为空――cell[2]
                                    int index = 0;
                                    if (resultTableRowBuffer.get_Value(resultTableRowBuffer.Fields.FindField("待匹配OID")).ToString() == "")
                                    {
                                        //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                        resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField("待匹配OID"), pTarFeature.get_Value(index));
                                    }
                                    else
                                    {
                                        string oids = resultTableRowBuffer.get_Value(resultTableRowBuffer.Fields.FindField("待匹配OID")).ToString() + ";" + pTarFeature.get_Value(index);
                                        //设置表TRA_PT_I_PtTabl的（待匹配oid）字段的值――cell[2]
                                        resultTableRowBuffer.set_Value(resultTableRowBuffer.Fields.FindField("待匹配OID"), oids);
                                    }
                                    if (!pDicCol.ContainsKey(idx))
                                    {
                                        pDicCol.Add(idx, pTarFeature);
                                    }
                                    idx = idx + 1;
                                }
                            }
                        }
                        pTarFeature = pTarCursor.NextFeature();
                    }

                    /**情况1：通过用代码构建缓冲区分析，缓冲区分析找不到对应要素，即为未匹配的要素。*/
                    if (pDicCol.Count == 0)
                    {
                        if (indexChangeMaker > -1)
                        {
                            resultTableRowBuffer.set_Value(indexChangeMaker, ClsConstant.One2Zero);
                        }
                        //resultTableRowCursor.InsertRow(resultTableRowBuffer);
                    }
                    /**情况2：通过用代码构建缓冲区分析，找到1条对应要素的情况（源图层和待匹配图层要素是1对1的情况），
                     * 需要判断属性图形是否发生变化。*/
                    else if (pDicCol.Count == 1)
                    {
                        IFeature feature = pDicCol[0] as IFeature;
                        //判断形状是否发生变化，如果没有变化blnShpEqual设为True
                        if (pSrcFeature.Shape != null)
                        {
                            pRelOp = pSrcFeature.Shape as IRelationalOperator;
                            blnShpEqual = pRelOp.Equals(feature.Shape);

                            //判断线方向性变化
                            blnAttriEqual = true;
                            //提取匹配字段，查找ID与OID
                            string[] array = fields.Split(';');
                            for (i = 0; i < array.Length; i++)
                            {
                                if (!array[i].Contains("("))
                                {
                                    int teIndex = feature.Fields.FindField(array[i]);
                                    int tuIndex = pSrcFeature.Fields.FindField(array[i]);
                                    if (teIndex == -1 || tuIndex == -1)
                                    {
                                        continue;
                                    }
                                    object teObj = feature.get_Value(teIndex);
                                    object tuObj = pSrcFeature.get_Value(tuIndex);

                                    if (Convert.IsDBNull(teObj) && (!Convert.IsDBNull(tuObj)))
                                    {
                                        blnAttriEqual = false;
                                    }
                                    else if (!Convert.IsDBNull(teObj) && (!Convert.IsDBNull(tuObj)))
                                    {
                                        if (feature.get_Value(teIndex).ToString() != pSrcFeature.get_Value(tuIndex).ToString())
                                        {
                                            blnAttriEqual = false;
                                        }
                                    }
                                    else if (!Convert.IsDBNull(teObj) && (Convert.IsDBNull(tuObj)))
                                    {
                                        if (!string.IsNullOrEmpty(feature.get_Value(teIndex).ToString()))
                                        {
                                            blnAttriEqual = false;
                                        }
                                    }

                                }
                                else
                                {
                                    string tef = array[i].Substring(0, array[i].LastIndexOf('('));
                                    string tuf = array[i].Substring(array[i].LastIndexOf('(') + 1);
                                    tuf = tuf.Substring(0, tuf.LastIndexOf(')'));
                                    int teIndex = feature.Fields.FindField(tef);
                                    int tuIndex = pSrcFeature.Fields.FindField(tuf);
                                    if (teIndex == -1 || tuIndex == -1)
                                    {
                                        continue;
                                    }
                                    object teObj = feature.get_Value(teIndex);
                                    object tuObj = pSrcFeature.get_Value(tuIndex);

                                    if (Convert.IsDBNull(teObj) && (!Convert.IsDBNull(tuObj)))
                                    {
                                        blnAttriEqual = false;
                                    }
                                    else if (!Convert.IsDBNull(teObj) && (!Convert.IsDBNull(tuObj)))
                                    {
                                        if (feature.get_Value(teIndex).ToString() != pSrcFeature.get_Value(tuIndex).ToString())
                                        {
                                            blnAttriEqual = false;
                                        }
                                    }
                                    else if (!Convert.IsDBNull(teObj) && (Convert.IsDBNull(tuObj)))
                                    {
                                        if (!string.IsNullOrEmpty(feature.get_Value(teIndex).ToString()))
                                        {
                                            blnAttriEqual = false;
                                        }
                                    }
                                }
                            }

                            if (blnShpEqual == false || blnAttriEqual == false)
                            {
                                ////只图形变化
                                if (blnShpEqual == false && blnAttriEqual)
                                {
                                    //indexChangeMaker = resultTableRowBuffer.Fields.FindField("变化标记");
                                    if (indexChangeMaker > -1)
                                    {
                                        //rowBuffer.set_Value(intFieldIndex, "图形变化");
                                        //rowBuffer.set_Value(intFieldIndex, "一对一");
                                        resultTableRowBuffer.set_Value(indexChangeMaker, ClsConstant.One2One);
                                    }

                                    ////只属性变化
                                }
                                else if (blnShpEqual && blnAttriEqual == false)
                                {
                                    //indexChangeMaker = resultTableRowBuffer.Fields.FindField("变化标记");
                                    if (indexChangeMaker > -1)
                                    {
                                        resultTableRowBuffer.set_Value(indexChangeMaker, "属性变化");
                                        ////修改的打标为6   
                                    }
                                    ////图形属性都变化
                                }
                                else if (blnShpEqual == false && blnAttriEqual == false)
                                {
                                    //indexChangeMaker = resultTableRowBuffer.Fields.FindField("变化标记");
                                    if (indexChangeMaker > -1)
                                    {
                                        resultTableRowBuffer.set_Value(indexChangeMaker, "属性图形变化");
                                        ////修改的打标为2        
                                    }

                                }
                            }
                            else if (blnShpEqual == true & blnAttriEqual == true)
                            {
                                //indexChangeMaker = resultTableRowBuffer.Fields.FindField("变化标记");
                                if (indexChangeMaker > -1)
                                {
                                    resultTableRowBuffer.set_Value(indexChangeMaker, "未变化");
                                }
                            }
                            //resultTableRowCursor.InsertRow(resultTableRowBuffer);
                        }
                    }
                    /**情况3：通过用代码构建缓冲区分析，找到多条对应要素的情况（源图层和待匹配图层要素是1对多的情况），
                     * 需要判断属性图形是否发生变化。*/
                    else if (pDicCol.Count > 1)
                    {
                        //indexChangeMaker = resultTableRowBuffer.Fields.FindField("变化标记");
                        if (indexChangeMaker > -1)
                        {
                            resultTableRowBuffer.set_Value(indexChangeMaker, ClsConstant.One2More);
                            //resultTableRowCursor.InsertRow(resultTableRowBuffer);
                        }
                    }
                    
                    resultTableRowCursor.InsertRow(resultTableRowBuffer);


                    //进程条处理
                    ClsStatic.AboutProcessBar(sourceFeatCount, prgMain, prgSub);

                    //每1千个要素就把缓冲区内的要素类写入目标层
                    if (tempFeatCount >= 500)
                    {
                        resultTableRowCursor.Flush();
                        tempFeatCount = 0;
                    }

                    stateLabel.Text = "正在对" + (pSrcFcls as IDataset).Name + "图层和" + (pTarFcls as IDataset).Name + "图层进行数据变化分析，已经处理" + prgMain.Value + "(" + sourceFeatCount + ")个要素。";
                    stateLabel.Refresh();
                    prgMain.Update();
                    prgSub.Update();
                    tempFeatCount = tempFeatCount + 1;
                    pSrcFeature = pSrcCursor.NextFeature();
                }
            }
            catch (System.Exception ex)
            {
                //MessageBox.Show(ex.Message);
                MessageBox.Show(ex.StackTrace);
            }
            if (resultTableRowCursor != null)
            {
                resultTableRowCursor.Flush();
            }

            workspaceEdit.StopEditOperation();
            workspaceEdit.StopEditing(true);

            stateLabel.Text = "";
            prgMain.Value = 0;
            prgSub.Value = 0;
            return true;
        }

